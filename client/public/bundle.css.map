{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/Board.svelte",
    "../src/StationPicker.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Board from \"./Board.svelte\"\n  import StationPicker from \"./StationPicker.svelte\"\n  import LinePicker from \"./LinePicker.svelte\"\n  let relevantStations = []\n  let relevantStationNames = \"\"\n  let possibleLines = []\n  let relevantLines = possibleLines\n  if (localStorage.getItem(\"relevantStations\")) {\n      relevantStations = JSON.parse(localStorage.getItem(\"relevantStations\"));\n  }\n  \n  $: relevantStationNames = relevantStations.map(station => station.Name)\n  $: possibleLines = [... new Set(relevantStations.map(station => station.Lines).flat())]\n\n  const toggle = (station) => { \n    if (relevantStations && station) {\n      let i = relevantStationNames.indexOf(station.Name)\n      if (i > -1) {\n        relevantStations = [...relevantStations.slice(0, i), ...relevantStations.slice(i + 1)];\n      }\n      else {        \n        relevantStations = [...relevantStations, station]\n      }\n      localStorage.setItem(\"relevantStations\", JSON.stringify(relevantStations));\n    }\n  }\n  \n  \n</script>\n\n<div class=\"relevant-stations\">\n  {#each relevantStations as station}\n    <span class=\"station\" on:click={() => toggle(station)}>{station.Name.length > 20 ? station.Name.substring(0,20) : station.Name}&nbsp;&nbsp;X</span>\n  {/each}\n</div>\n<StationPicker bind:relevantStations={relevantStations}/>\n<!-- <LinePicker bind:possibleLines={possibleLines} bind:relevantLines={relevantLines} /> -->\n<Board bind:relevantStationNames={relevantStationNames} />\n\n<style>\n  .station {\n    background-color: grey;\n    border-radius: 5px;\n    padding: 2px;\n    margin: 2px;\n    text-align: center;\n  }\n\n  .relevant-stations {\n    margin: 5px;\n    display: flex;\n    width: 100%;\n  }\n</style>\n",
    "<script>\n  import { onMount } from \"svelte\"\n  let trainPredictions;\n  export let relevantStationNames;\n\n  onMount(async () => {\n    trainPredictions = await getTrainPredictions()\n  })\n\n  const getTrainPredictions = async () => {\n    const response = await fetch(`./train_predictions`)\n    return response.json()\n  }\n\n</script>\n{#if relevantStationNames}\n  {#each relevantStationNames as station}\n    <h1 class=\"board-station\">{station.length > 20 ? station.substring(0,20) : station}</h1>\n    {#if trainPredictions}\n      <table>\n      {#each trainPredictions as train}\n        {#if train.LocationName == station && train.Destination != \"ssenger\"}\n          <tr class=\"train\">\n            <td><span class=\"dot {train.Line}\"></span></td>\n            <td>{train.Destination}&nbsp;&nbsp;&nbsp;&nbsp;</td>\n            <td>{train.Min}</td>\n          </tr>\n        {/if}\n      {/each}\n      </table>\n    {:else}\n      Loading...\n    {/if}\n  {/each}\n{/if}\n\n<style>\n  .board-station {\n    text-transform: uppercase;\n    color: #FF5442;\n    margin-bottom: 3px;\n  }\n  .train {\n    text-transform: uppercase;\n    color: #FFF068;\n    font-size: 22px;\n  }\n</style>",
    "<script>\n  import { onMount } from \"svelte\"\n  let allStations\n  let query = \"\"\n  let searchResults = []\n  let placeholder\n  export let relevantStations\n  $: relevantStationNames = relevantStations.map(station => station.Name)\n  $: placeholder = relevantStations.length == 0 ? \"Add stations\" : \"\"\n  onMount(async () => {\n    allStations = await getStations()\n    searchResults = []\n  })\n\n  const getStations = async () => {\n    const response = await fetch(`./stations`)\n    return response.json()\n  }\n\n  const searchStations = () => {\n    if (query == \"\") {\n      return searchResults = []\n    }\n    else {\n      return searchResults = allStations.filter(station => {\n        let stationName = station.Name.toLowerCase().replace(\"'\", \"\");\n        return stationName.includes(query.toLowerCase().replace(\"'\", \"\"))\n      })\n    } \n    \n  }\n\n  const toggle = (station) => { \n    if (relevantStations && station) {\n      let i = relevantStationNames.indexOf(station.Name)\n      if (i > -1) {\n        relevantStations = [...relevantStations.slice(0, i), ...relevantStations.slice(i + 1)];\n      }\n      else {        \n        relevantStations = [...relevantStations, station]\n      }\n      localStorage.setItem(\"relevantStations\", JSON.stringify(relevantStations));\n    }\n    query = \"\"\n    searchStations()\n  }\n\n\n\n  \n</script>\n<input type=\"text\" id=\"search\" placeholder=\"🔍 {placeholder}\" bind:value={query} on:input={searchStations}>\n<table>\n{#each searchResults as station}\n    <tr class=\"station\">\n      <td>\n        <button on:click={() => toggle(station)} class=\"{relevantStationNames.indexOf(station.Name) > -1 ? \"is-relevant\" : \"\"}\" autocomplete=\"off\">\n          {station.Name.length > 20 ? station.Name.substring(0,20) : station.Name}\n          {#each station.Lines as line}\n            {#if line}\n              <span class=\"dot {line}\"></span>\n            {/if}\n          {/each}\n        </button>\n      </td>\n      <!-- {JSON.stringify(station)} -->\n    </tr>\n  \n{/each}\n</table>    \n\n\n\n<style>\n  \n  .station {\n    text-transform: uppercase;\n    color: #FFF068;\n    margin-bottom: 3px;\n  }\n  .lines {\n    text-align: left;\n  }\n  #search {\n    text-transform: uppercase;\n    color: #FF5442;\n    font-size: 22px;\n    background-color: #21292f;\n    width: 100%;\n    border-width: 1px;\n    border-radius: 10px;\n  }\n  ::placeholder {\n    color: #FFF068;\n    opacity: 1; \n  }\n  .is-relevant {\n    background-color: #ffffffeb;\n    color: black;\n  }\n</style>"
  ],
  "names": [],
  "mappings": "AAyCE,QAAQ,eAAC,CAAC,AACR,gBAAgB,CAAE,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CACX,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,kBAAkB,eAAC,CAAC,AAClB,MAAM,CAAE,GAAG,CACX,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,IAAI,AACb,CAAC;AChBD,cAAc,cAAC,CAAC,AACd,cAAc,CAAE,SAAS,CACzB,KAAK,CAAE,OAAO,CACd,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,cAAc,CAAE,SAAS,CACzB,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,IAAI,AACjB,CAAC;AC6BD,QAAQ,cAAC,CAAC,AACR,cAAc,CAAE,SAAS,CACzB,KAAK,CAAE,OAAO,CACd,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,OAAO,cAAC,CAAC,AACP,cAAc,CAAE,SAAS,CACzB,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,IAAI,CACf,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,IAAI,CACX,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,IAAI,AACrB,CAAC,cACD,aAAa,AAAC,CAAC,AACb,KAAK,CAAE,OAAO,CACd,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,YAAY,cAAC,CAAC,AACZ,gBAAgB,CAAE,SAAS,CAC3B,KAAK,CAAE,KAAK,AACd,CAAC"
}